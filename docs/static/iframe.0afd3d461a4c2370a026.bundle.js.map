{"version":3,"file":"static/iframe.0afd3d461a4c2370a026.bundle.js","sources":["webpack:///./src/lib/Button/index.js"],"sourcesContent":["import React from 'react'\r\nimport classNames from 'classnames'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n//import css\r\nimport styles from './styles.module.scss'\r\n\r\n//render prop component to be used for formatting other components\r\nclass Button extends React.Component {\r\n  handleOnClick = () => {\r\n    this.props.onClick()\r\n  }\r\n\r\n  render(){\r\n    let inlineStyles = this.props.inlineStyles || {}\r\n    let type = `button`\r\n\r\n    //logic for dynamic classnames\r\n    let btnClass = classNames({\r\n      [styles.button]: true,\r\n      [styles.plain]: this.props.type === `plain`,\r\n      [styles.primary]: this.props.type === `primary`,\r\n      [styles.small]: this.props.size === `small`,\r\n      [styles.medium]: this.props.size === `medium`,\r\n      [styles.large]: this.props.size === `large`,\r\n      [this.props.className]: this.props.className\r\n    })\r\n    \r\n    //handle full width conditional\r\n    if (this.props.fullWidth) {\r\n      inlineStyles.width = `100%`\r\n    }\r\n    \r\n    //if there is fontSize then overwrite the defualt\r\n    if(this.props.fontSize) {\r\n      inlineStyles.fontSize = `${this.props.fontSize}px`\r\n      inlineStyles.lineHeight = `${this.props.fontSize}px`\r\n    }\r\n\r\n    //if submitsForm is true then make its type submit\r\n    if (this.props.submitsForm) {\r\n      type = `submit`\r\n    }\r\n\r\n    //declare a default element\r\n    let element =  <button \r\n      className={btnClass} \r\n      style={inlineStyles} \r\n      onClick={this.props.onClick}\r\n      type={type}\r\n    >{this.props.text}</button>\r\n    \r\n    //logic to display a button element or a link\r\n    if (this.props.type === `link`) {\r\n      element = <a className={styles.link} href={this.props.linkTo}>{this.props.text}</a>\r\n    }\r\n\r\n    //logic to display a button element or a routed link\r\n    if (this.props.type === `routedLink`) {\r\n      element = <Link className={styles.link} to={this.props.linkTo}>{this.props.text}</Link>\r\n    }\r\n\r\n    return (element)\r\n  }\r\n}\r\n\r\n//rules for props being passed in\r\nButton.propTypes = {\r\n  text: PropTypes.string,\r\n  type: PropTypes.oneOf([`plain`, `primary`, `link`, `routedLink`]),\r\n  size: PropTypes.oneOf([`small`, `medium`, `large`]),\r\n  linkTo: PropTypes.string,\r\n  fontSize: PropTypes.number,\r\n  fullWidth: PropTypes.bool,\r\n  submitsForm: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  inlineStyles: PropTypes.object,\r\n  className: PropTypes.string\r\n}\r\n\r\n// Specifies the default values for props:\r\nButton.defaultProps = {\r\n  text: `None Provided`,\r\n  type: `primary`,\r\n  size: `medium`,\r\n  fullWidth: false,\r\n  submitsForm: false\r\n}\r\n\r\n//maintain the name for documentation purposes\r\nButton.displayName = 'Button'\r\n\r\nexport default Button"],"mappings":"AASA","sourceRoot":""}